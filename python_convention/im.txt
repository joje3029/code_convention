# Python 코드 컨벤션 가이드

## 1. 기본 Python 코드 컨벤션 (PEP 8)

### 1.1 코드 레이아웃
- 들여쓰기: 4칸 스페이스
- 최대 줄 길이: 79자 (코드), 72자 (주석/문서)
- 이항 연산자 전후 줄바꿈
- 파일은 UTF-8 인코딩 사용
- import는 별도 라인에 작성
- import 순서: 표준 라이브러리 > 서드파티 > 로컬 애플리케이션

### 1.2 네이밍 컨벤션
- 함수/변수/속성: snake_case
- 클래스: PascalCase
- 상수: UPPER_CASE_WITH_UNDERSCORES
- 보호된 인스턴스 속성: _leading_underscore
- 비공개 인스턴스 속성: __double_leading_underscore

### 1.3 문법 관련
- 공백 사용
  - 연산자 전후
  - 콤마 후
  - 키워드 인자 = 전후는 공백 없음
- 주석
  - 인라인 주석은 최소 2칸 띄우기
  - 문장 끝에 불필요한 주석 피하기
- 문자열
  - 따옴표 일관성 유지 (작은따옴표 or 큰따옴표)

## 2. 프레임워크별 특화 컨벤션

### 2.1 Django
- 프로젝트 구조
  ```
  myproject/
  ├── manage.py
  ├── myproject/
  │   ├── __init__.py
  │   ├── settings.py
  │   ├── urls.py
  │   └── wsgi.py
  └── myapp/
      ├── __init__.py
      ├── admin.py
      ├── apps.py
      ├── models.py
      ├── tests.py
      └── views.py
  ```
- MVT 패턴 준수
- models.py: 모델 클래스는 단수형
- views.py: 클래스형 뷰 권장
- urls.py: URL 패턴은 명확하고 RESTful하게

### 2.2 Flask
- 프로젝트 구조 (권장)
  ```
  myproject/
  ├── run.py
  ├── config.py
  ├── requirements.txt
  └── app/
      ├── __init__.py
      ├── views.py
      ├── models.py
      └── templates/
  ```
- 블루프린트 사용 권장
- 라우트 데코레이터 사용
- 설정은 config.py에 집중

### 2.3 FastAPI
- 프로젝트 구조
  ```
  myproject/
  ├── main.py
  ├── requirements.txt
  └── app/
      ├── __init__.py
      ├── models.py
      ├── schemas.py
      ├── crud.py
      └── api/
  ```
- Pydantic 모델 사용
- 타입 힌트 필수
- 비동기 함수 사용 권장
- OpenAPI 문서화

## 3. 린터 도구

### 3.1 주요 린터
1. Pylint
   - 장점: 가장 포괄적인 검사
   - 단점: 다소 엄격하고 설정 복잡
   
2. Flake8
   - 장점: 빠르고 실용적
   - 단점: Pylint보다 덜 엄격
   
3. Black
   - 장점: 자동 포맷팅, 설정 불필요
   - 단점: 커스터마이징 제한적

### 3.2 특화 린터
1. MyPy: 타입 체크
2. Bandit: 보안 검사
3. isort: import 문 정렬
4. docformatter: 문서 포맷팅
5. pydocstyle: 문서 스타일 검사

### 3.3 추천 조합
- 기본: Flake8 + Black + isort
- 고급: Pylint + Black + MyPy + Bandit
- FastAPI 특화: Flake8 + Black + MyPy
- Django 특화: Pylint + Black + djlint

## 4. 문서화

### 4.1 Docstring 컨벤션
- Google 스타일
  ```python
  def function(arg1: int, arg2: str) -> bool:
      """함수 설명
      
      Args:
          arg1: 첫 번째 인자 설명
          arg2: 두 번째 인자 설명
          
      Returns:
          반환값 설명
          
      Raises:
          ValueError: 예외 설명
      """
  ```

### 4.2 README.md 구조
1. 프로젝트 개요
2. 설치 방법
3. 사용 방법
4. 환경 설정
5. 기여 방법
6. 라이선스

## 5. 참고 자료
- PEP 8: https://www.python.org/dev/peps/pep-0008/
- Django 문서: https://docs.djangoproject.com/
- Flask 문서: https://flask.palletsprojects.com/
- FastAPI 문서: https://fastapi.tiangolo.com/
